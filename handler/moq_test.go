// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package handler

import (
	"context"
	"github.com/kwtryo/go-sample/model"
	"sync"
)

// Ensure, that HealthServiceMock does implement HealthService.
// If this is not the case, regenerate this file with moq.
var _ HealthService = &HealthServiceMock{}

// HealthServiceMock is a mock implementation of HealthService.
//
//	func TestSomethingThatUsesHealthService(t *testing.T) {
//
//		// make and configure a mocked HealthService
//		mockedHealthService := &HealthServiceMock{
//			HealthCheckFunc: func(ctx context.Context) error {
//				panic("mock out the HealthCheck method")
//			},
//		}
//
//		// use mockedHealthService in code that requires HealthService
//		// and then make assertions.
//
//	}
type HealthServiceMock struct {
	// HealthCheckFunc mocks the HealthCheck method.
	HealthCheckFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// HealthCheck holds details about calls to the HealthCheck method.
		HealthCheck []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockHealthCheck sync.RWMutex
}

// HealthCheck calls HealthCheckFunc.
func (mock *HealthServiceMock) HealthCheck(ctx context.Context) error {
	if mock.HealthCheckFunc == nil {
		panic("HealthServiceMock.HealthCheckFunc: method is nil but HealthService.HealthCheck was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockHealthCheck.Lock()
	mock.calls.HealthCheck = append(mock.calls.HealthCheck, callInfo)
	mock.lockHealthCheck.Unlock()
	return mock.HealthCheckFunc(ctx)
}

// HealthCheckCalls gets all the calls that were made to HealthCheck.
// Check the length with:
//
//	len(mockedHealthService.HealthCheckCalls())
func (mock *HealthServiceMock) HealthCheckCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockHealthCheck.RLock()
	calls = mock.calls.HealthCheck
	mock.lockHealthCheck.RUnlock()
	return calls
}

// Ensure, that UserServiceMock does implement UserService.
// If this is not the case, regenerate this file with moq.
var _ UserService = &UserServiceMock{}

// UserServiceMock is a mock implementation of UserService.
//
//	func TestSomethingThatUsesUserService(t *testing.T) {
//
//		// make and configure a mocked UserService
//		mockedUserService := &UserServiceMock{
//			GetUserFunc: func(ctx context.Context, userName string) (*model.User, error) {
//				panic("mock out the GetUser method")
//			},
//			RegisterUserFunc: func(ctx context.Context, form *model.FormRequest) (*model.User, error) {
//				panic("mock out the RegisterUser method")
//			},
//		}
//
//		// use mockedUserService in code that requires UserService
//		// and then make assertions.
//
//	}
type UserServiceMock struct {
	// GetUserFunc mocks the GetUser method.
	GetUserFunc func(ctx context.Context, userName string) (*model.User, error)

	// RegisterUserFunc mocks the RegisterUser method.
	RegisterUserFunc func(ctx context.Context, form *model.FormRequest) (*model.User, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetUser holds details about calls to the GetUser method.
		GetUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserName is the userName argument value.
			UserName string
		}
		// RegisterUser holds details about calls to the RegisterUser method.
		RegisterUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Form is the form argument value.
			Form *model.FormRequest
		}
	}
	lockGetUser      sync.RWMutex
	lockRegisterUser sync.RWMutex
}

// GetUser calls GetUserFunc.
func (mock *UserServiceMock) GetUser(ctx context.Context, userName string) (*model.User, error) {
	if mock.GetUserFunc == nil {
		panic("UserServiceMock.GetUserFunc: method is nil but UserService.GetUser was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		UserName string
	}{
		Ctx:      ctx,
		UserName: userName,
	}
	mock.lockGetUser.Lock()
	mock.calls.GetUser = append(mock.calls.GetUser, callInfo)
	mock.lockGetUser.Unlock()
	return mock.GetUserFunc(ctx, userName)
}

// GetUserCalls gets all the calls that were made to GetUser.
// Check the length with:
//
//	len(mockedUserService.GetUserCalls())
func (mock *UserServiceMock) GetUserCalls() []struct {
	Ctx      context.Context
	UserName string
} {
	var calls []struct {
		Ctx      context.Context
		UserName string
	}
	mock.lockGetUser.RLock()
	calls = mock.calls.GetUser
	mock.lockGetUser.RUnlock()
	return calls
}

// RegisterUser calls RegisterUserFunc.
func (mock *UserServiceMock) RegisterUser(ctx context.Context, form *model.FormRequest) (*model.User, error) {
	if mock.RegisterUserFunc == nil {
		panic("UserServiceMock.RegisterUserFunc: method is nil but UserService.RegisterUser was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Form *model.FormRequest
	}{
		Ctx:  ctx,
		Form: form,
	}
	mock.lockRegisterUser.Lock()
	mock.calls.RegisterUser = append(mock.calls.RegisterUser, callInfo)
	mock.lockRegisterUser.Unlock()
	return mock.RegisterUserFunc(ctx, form)
}

// RegisterUserCalls gets all the calls that were made to RegisterUser.
// Check the length with:
//
//	len(mockedUserService.RegisterUserCalls())
func (mock *UserServiceMock) RegisterUserCalls() []struct {
	Ctx  context.Context
	Form *model.FormRequest
} {
	var calls []struct {
		Ctx  context.Context
		Form *model.FormRequest
	}
	mock.lockRegisterUser.RLock()
	calls = mock.calls.RegisterUser
	mock.lockRegisterUser.RUnlock()
	return calls
}
