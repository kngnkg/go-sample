// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package handler

import (
	"context"
	jwt "github.com/appleboy/gin-jwt/v2"
	"github.com/gin-gonic/gin"
	"github.com/kwtryo/go-sample/model"
	"sync"
)

// Ensure, that HealthServiceMock does implement HealthService.
// If this is not the case, regenerate this file with moq.
var _ HealthService = &HealthServiceMock{}

// HealthServiceMock is a mock implementation of HealthService.
//
//	func TestSomethingThatUsesHealthService(t *testing.T) {
//
//		// make and configure a mocked HealthService
//		mockedHealthService := &HealthServiceMock{
//			HealthCheckFunc: func(ctx context.Context) error {
//				panic("mock out the HealthCheck method")
//			},
//		}
//
//		// use mockedHealthService in code that requires HealthService
//		// and then make assertions.
//
//	}
type HealthServiceMock struct {
	// HealthCheckFunc mocks the HealthCheck method.
	HealthCheckFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// HealthCheck holds details about calls to the HealthCheck method.
		HealthCheck []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockHealthCheck sync.RWMutex
}

// HealthCheck calls HealthCheckFunc.
func (mock *HealthServiceMock) HealthCheck(ctx context.Context) error {
	if mock.HealthCheckFunc == nil {
		panic("HealthServiceMock.HealthCheckFunc: method is nil but HealthService.HealthCheck was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockHealthCheck.Lock()
	mock.calls.HealthCheck = append(mock.calls.HealthCheck, callInfo)
	mock.lockHealthCheck.Unlock()
	return mock.HealthCheckFunc(ctx)
}

// HealthCheckCalls gets all the calls that were made to HealthCheck.
// Check the length with:
//
//	len(mockedHealthService.HealthCheckCalls())
func (mock *HealthServiceMock) HealthCheckCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockHealthCheck.RLock()
	calls = mock.calls.HealthCheck
	mock.lockHealthCheck.RUnlock()
	return calls
}

// Ensure, that AuthServiceMock does implement AuthService.
// If this is not the case, regenerate this file with moq.
var _ AuthService = &AuthServiceMock{}

// AuthServiceMock is a mock implementation of AuthService.
//
//	func TestSomethingThatUsesAuthService(t *testing.T) {
//
//		// make and configure a mocked AuthService
//		mockedAuthService := &AuthServiceMock{
//			AuthenticatorFunc: func(c *gin.Context) (interface{}, error) {
//				panic("mock out the Authenticator method")
//			},
//			AuthorizatorFunc: func(data interface{}, c *gin.Context) bool {
//				panic("mock out the Authorizator method")
//			},
//			IdentityHandlerFunc: func(c *gin.Context) interface{} {
//				panic("mock out the IdentityHandler method")
//			},
//			LogoutFunc: func(c *gin.Context) error {
//				panic("mock out the Logout method")
//			},
//			PayloadFuncFunc: func(data interface{}) jwt.MapClaims {
//				panic("mock out the PayloadFunc method")
//			},
//		}
//
//		// use mockedAuthService in code that requires AuthService
//		// and then make assertions.
//
//	}
type AuthServiceMock struct {
	// AuthenticatorFunc mocks the Authenticator method.
	AuthenticatorFunc func(c *gin.Context) (interface{}, error)

	// AuthorizatorFunc mocks the Authorizator method.
	AuthorizatorFunc func(data interface{}, c *gin.Context) bool

	// IdentityHandlerFunc mocks the IdentityHandler method.
	IdentityHandlerFunc func(c *gin.Context) interface{}

	// LogoutFunc mocks the Logout method.
	LogoutFunc func(c *gin.Context) error

	// PayloadFuncFunc mocks the PayloadFunc method.
	PayloadFuncFunc func(data interface{}) jwt.MapClaims

	// calls tracks calls to the methods.
	calls struct {
		// Authenticator holds details about calls to the Authenticator method.
		Authenticator []struct {
			// C is the c argument value.
			C *gin.Context
		}
		// Authorizator holds details about calls to the Authorizator method.
		Authorizator []struct {
			// Data is the data argument value.
			Data interface{}
			// C is the c argument value.
			C *gin.Context
		}
		// IdentityHandler holds details about calls to the IdentityHandler method.
		IdentityHandler []struct {
			// C is the c argument value.
			C *gin.Context
		}
		// Logout holds details about calls to the Logout method.
		Logout []struct {
			// C is the c argument value.
			C *gin.Context
		}
		// PayloadFunc holds details about calls to the PayloadFunc method.
		PayloadFunc []struct {
			// Data is the data argument value.
			Data interface{}
		}
	}
	lockAuthenticator   sync.RWMutex
	lockAuthorizator    sync.RWMutex
	lockIdentityHandler sync.RWMutex
	lockLogout          sync.RWMutex
	lockPayloadFunc     sync.RWMutex
}

// Authenticator calls AuthenticatorFunc.
func (mock *AuthServiceMock) Authenticator(c *gin.Context) (interface{}, error) {
	if mock.AuthenticatorFunc == nil {
		panic("AuthServiceMock.AuthenticatorFunc: method is nil but AuthService.Authenticator was just called")
	}
	callInfo := struct {
		C *gin.Context
	}{
		C: c,
	}
	mock.lockAuthenticator.Lock()
	mock.calls.Authenticator = append(mock.calls.Authenticator, callInfo)
	mock.lockAuthenticator.Unlock()
	return mock.AuthenticatorFunc(c)
}

// AuthenticatorCalls gets all the calls that were made to Authenticator.
// Check the length with:
//
//	len(mockedAuthService.AuthenticatorCalls())
func (mock *AuthServiceMock) AuthenticatorCalls() []struct {
	C *gin.Context
} {
	var calls []struct {
		C *gin.Context
	}
	mock.lockAuthenticator.RLock()
	calls = mock.calls.Authenticator
	mock.lockAuthenticator.RUnlock()
	return calls
}

// Authorizator calls AuthorizatorFunc.
func (mock *AuthServiceMock) Authorizator(data interface{}, c *gin.Context) bool {
	if mock.AuthorizatorFunc == nil {
		panic("AuthServiceMock.AuthorizatorFunc: method is nil but AuthService.Authorizator was just called")
	}
	callInfo := struct {
		Data interface{}
		C    *gin.Context
	}{
		Data: data,
		C:    c,
	}
	mock.lockAuthorizator.Lock()
	mock.calls.Authorizator = append(mock.calls.Authorizator, callInfo)
	mock.lockAuthorizator.Unlock()
	return mock.AuthorizatorFunc(data, c)
}

// AuthorizatorCalls gets all the calls that were made to Authorizator.
// Check the length with:
//
//	len(mockedAuthService.AuthorizatorCalls())
func (mock *AuthServiceMock) AuthorizatorCalls() []struct {
	Data interface{}
	C    *gin.Context
} {
	var calls []struct {
		Data interface{}
		C    *gin.Context
	}
	mock.lockAuthorizator.RLock()
	calls = mock.calls.Authorizator
	mock.lockAuthorizator.RUnlock()
	return calls
}

// IdentityHandler calls IdentityHandlerFunc.
func (mock *AuthServiceMock) IdentityHandler(c *gin.Context) interface{} {
	if mock.IdentityHandlerFunc == nil {
		panic("AuthServiceMock.IdentityHandlerFunc: method is nil but AuthService.IdentityHandler was just called")
	}
	callInfo := struct {
		C *gin.Context
	}{
		C: c,
	}
	mock.lockIdentityHandler.Lock()
	mock.calls.IdentityHandler = append(mock.calls.IdentityHandler, callInfo)
	mock.lockIdentityHandler.Unlock()
	return mock.IdentityHandlerFunc(c)
}

// IdentityHandlerCalls gets all the calls that were made to IdentityHandler.
// Check the length with:
//
//	len(mockedAuthService.IdentityHandlerCalls())
func (mock *AuthServiceMock) IdentityHandlerCalls() []struct {
	C *gin.Context
} {
	var calls []struct {
		C *gin.Context
	}
	mock.lockIdentityHandler.RLock()
	calls = mock.calls.IdentityHandler
	mock.lockIdentityHandler.RUnlock()
	return calls
}

// Logout calls LogoutFunc.
func (mock *AuthServiceMock) Logout(c *gin.Context) error {
	if mock.LogoutFunc == nil {
		panic("AuthServiceMock.LogoutFunc: method is nil but AuthService.Logout was just called")
	}
	callInfo := struct {
		C *gin.Context
	}{
		C: c,
	}
	mock.lockLogout.Lock()
	mock.calls.Logout = append(mock.calls.Logout, callInfo)
	mock.lockLogout.Unlock()
	return mock.LogoutFunc(c)
}

// LogoutCalls gets all the calls that were made to Logout.
// Check the length with:
//
//	len(mockedAuthService.LogoutCalls())
func (mock *AuthServiceMock) LogoutCalls() []struct {
	C *gin.Context
} {
	var calls []struct {
		C *gin.Context
	}
	mock.lockLogout.RLock()
	calls = mock.calls.Logout
	mock.lockLogout.RUnlock()
	return calls
}

// PayloadFunc calls PayloadFuncFunc.
func (mock *AuthServiceMock) PayloadFunc(data interface{}) jwt.MapClaims {
	if mock.PayloadFuncFunc == nil {
		panic("AuthServiceMock.PayloadFuncFunc: method is nil but AuthService.PayloadFunc was just called")
	}
	callInfo := struct {
		Data interface{}
	}{
		Data: data,
	}
	mock.lockPayloadFunc.Lock()
	mock.calls.PayloadFunc = append(mock.calls.PayloadFunc, callInfo)
	mock.lockPayloadFunc.Unlock()
	return mock.PayloadFuncFunc(data)
}

// PayloadFuncCalls gets all the calls that were made to PayloadFunc.
// Check the length with:
//
//	len(mockedAuthService.PayloadFuncCalls())
func (mock *AuthServiceMock) PayloadFuncCalls() []struct {
	Data interface{}
} {
	var calls []struct {
		Data interface{}
	}
	mock.lockPayloadFunc.RLock()
	calls = mock.calls.PayloadFunc
	mock.lockPayloadFunc.RUnlock()
	return calls
}

// Ensure, that UserServiceMock does implement UserService.
// If this is not the case, regenerate this file with moq.
var _ UserService = &UserServiceMock{}

// UserServiceMock is a mock implementation of UserService.
//
//	func TestSomethingThatUsesUserService(t *testing.T) {
//
//		// make and configure a mocked UserService
//		mockedUserService := &UserServiceMock{
//			GetUserFunc: func(ctx context.Context, userName string) (*model.User, error) {
//				panic("mock out the GetUser method")
//			},
//			RegisterUserFunc: func(ctx context.Context, form *model.FormRequest) (*model.User, error) {
//				panic("mock out the RegisterUser method")
//			},
//		}
//
//		// use mockedUserService in code that requires UserService
//		// and then make assertions.
//
//	}
type UserServiceMock struct {
	// GetUserFunc mocks the GetUser method.
	GetUserFunc func(ctx context.Context, userName string) (*model.User, error)

	// RegisterUserFunc mocks the RegisterUser method.
	RegisterUserFunc func(ctx context.Context, form *model.FormRequest) (*model.User, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetUser holds details about calls to the GetUser method.
		GetUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserName is the userName argument value.
			UserName string
		}
		// RegisterUser holds details about calls to the RegisterUser method.
		RegisterUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Form is the form argument value.
			Form *model.FormRequest
		}
	}
	lockGetUser      sync.RWMutex
	lockRegisterUser sync.RWMutex
}

// GetUser calls GetUserFunc.
func (mock *UserServiceMock) GetUser(ctx context.Context, userName string) (*model.User, error) {
	if mock.GetUserFunc == nil {
		panic("UserServiceMock.GetUserFunc: method is nil but UserService.GetUser was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		UserName string
	}{
		Ctx:      ctx,
		UserName: userName,
	}
	mock.lockGetUser.Lock()
	mock.calls.GetUser = append(mock.calls.GetUser, callInfo)
	mock.lockGetUser.Unlock()
	return mock.GetUserFunc(ctx, userName)
}

// GetUserCalls gets all the calls that were made to GetUser.
// Check the length with:
//
//	len(mockedUserService.GetUserCalls())
func (mock *UserServiceMock) GetUserCalls() []struct {
	Ctx      context.Context
	UserName string
} {
	var calls []struct {
		Ctx      context.Context
		UserName string
	}
	mock.lockGetUser.RLock()
	calls = mock.calls.GetUser
	mock.lockGetUser.RUnlock()
	return calls
}

// RegisterUser calls RegisterUserFunc.
func (mock *UserServiceMock) RegisterUser(ctx context.Context, form *model.FormRequest) (*model.User, error) {
	if mock.RegisterUserFunc == nil {
		panic("UserServiceMock.RegisterUserFunc: method is nil but UserService.RegisterUser was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Form *model.FormRequest
	}{
		Ctx:  ctx,
		Form: form,
	}
	mock.lockRegisterUser.Lock()
	mock.calls.RegisterUser = append(mock.calls.RegisterUser, callInfo)
	mock.lockRegisterUser.Unlock()
	return mock.RegisterUserFunc(ctx, form)
}

// RegisterUserCalls gets all the calls that were made to RegisterUser.
// Check the length with:
//
//	len(mockedUserService.RegisterUserCalls())
func (mock *UserServiceMock) RegisterUserCalls() []struct {
	Ctx  context.Context
	Form *model.FormRequest
} {
	var calls []struct {
		Ctx  context.Context
		Form *model.FormRequest
	}
	mock.lockRegisterUser.RLock()
	calls = mock.calls.RegisterUser
	mock.lockRegisterUser.RUnlock()
	return calls
}
