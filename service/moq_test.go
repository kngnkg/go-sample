// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package service

import (
	"context"
	"github.com/kwtryo/go-sample/model"
	"github.com/kwtryo/go-sample/store"
	"sync"
)

// Ensure, that UserRepositoryMock does implement UserRepository.
// If this is not the case, regenerate this file with moq.
var _ UserRepository = &UserRepositoryMock{}

// UserRepositoryMock is a mock implementation of UserRepository.
//
//	func TestSomethingThatUsesUserRepository(t *testing.T) {
//
//		// make and configure a mocked UserRepository
//		mockedUserRepository := &UserRepositoryMock{
//			GetUserFunc: func(ctx context.Context, db store.DBConnection, userName string) (*model.User, error) {
//				panic("mock out the GetUser method")
//			},
//			RegisterUserFunc: func(ctx context.Context, db store.DBConnection, u *model.User) (*model.User, error) {
//				panic("mock out the RegisterUser method")
//			},
//		}
//
//		// use mockedUserRepository in code that requires UserRepository
//		// and then make assertions.
//
//	}
type UserRepositoryMock struct {
	// GetUserFunc mocks the GetUser method.
	GetUserFunc func(ctx context.Context, db store.DBConnection, userName string) (*model.User, error)

	// RegisterUserFunc mocks the RegisterUser method.
	RegisterUserFunc func(ctx context.Context, db store.DBConnection, u *model.User) (*model.User, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetUser holds details about calls to the GetUser method.
		GetUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Db is the db argument value.
			Db store.DBConnection
			// UserName is the userName argument value.
			UserName string
		}
		// RegisterUser holds details about calls to the RegisterUser method.
		RegisterUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Db is the db argument value.
			Db store.DBConnection
			// U is the u argument value.
			U *model.User
		}
	}
	lockGetUser      sync.RWMutex
	lockRegisterUser sync.RWMutex
}

// GetUser calls GetUserFunc.
func (mock *UserRepositoryMock) GetUser(ctx context.Context, db store.DBConnection, userName string) (*model.User, error) {
	if mock.GetUserFunc == nil {
		panic("UserRepositoryMock.GetUserFunc: method is nil but UserRepository.GetUser was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Db       store.DBConnection
		UserName string
	}{
		Ctx:      ctx,
		Db:       db,
		UserName: userName,
	}
	mock.lockGetUser.Lock()
	mock.calls.GetUser = append(mock.calls.GetUser, callInfo)
	mock.lockGetUser.Unlock()
	return mock.GetUserFunc(ctx, db, userName)
}

// GetUserCalls gets all the calls that were made to GetUser.
// Check the length with:
//
//	len(mockedUserRepository.GetUserCalls())
func (mock *UserRepositoryMock) GetUserCalls() []struct {
	Ctx      context.Context
	Db       store.DBConnection
	UserName string
} {
	var calls []struct {
		Ctx      context.Context
		Db       store.DBConnection
		UserName string
	}
	mock.lockGetUser.RLock()
	calls = mock.calls.GetUser
	mock.lockGetUser.RUnlock()
	return calls
}

// RegisterUser calls RegisterUserFunc.
func (mock *UserRepositoryMock) RegisterUser(ctx context.Context, db store.DBConnection, u *model.User) (*model.User, error) {
	if mock.RegisterUserFunc == nil {
		panic("UserRepositoryMock.RegisterUserFunc: method is nil but UserRepository.RegisterUser was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Db  store.DBConnection
		U   *model.User
	}{
		Ctx: ctx,
		Db:  db,
		U:   u,
	}
	mock.lockRegisterUser.Lock()
	mock.calls.RegisterUser = append(mock.calls.RegisterUser, callInfo)
	mock.lockRegisterUser.Unlock()
	return mock.RegisterUserFunc(ctx, db, u)
}

// RegisterUserCalls gets all the calls that were made to RegisterUser.
// Check the length with:
//
//	len(mockedUserRepository.RegisterUserCalls())
func (mock *UserRepositoryMock) RegisterUserCalls() []struct {
	Ctx context.Context
	Db  store.DBConnection
	U   *model.User
} {
	var calls []struct {
		Ctx context.Context
		Db  store.DBConnection
		U   *model.User
	}
	mock.lockRegisterUser.RLock()
	calls = mock.calls.RegisterUser
	mock.lockRegisterUser.RUnlock()
	return calls
}
